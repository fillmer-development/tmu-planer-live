{"version":3,"sources":["redux/constants.js","redux/store.js","redux/reducers.js","schedule/UnitConversionSelector.js","redux/actions.js","schedule/Step.js","schedule/ExportSchedule.js","schedule/utils.js","schedule/Schedule.js","workstepSelector/utils.js","workstepSelector/TreeNode.js","workstepSelector/Tree.js","workstepSelector/DataTable.js","workstepSelector/StepSelectorConfirm.js","workstepSelector/WorkstepSelectionDialog.js","scheduleList/utils.js","scheduleList/ListItemView.js","scheduleList/ScheduleList.js","segments/SegmentForm.js","segments/SegmentTable.js","segments/utils.js","segments/SegmentImportManager.js","segments/SegmentManager.js","App.js","serviceWorker.js","index.js"],"names":["ACTIONS","CONFIG","localStorage","unitConversion","name","conversion","local","getItem","localData","JSON","parse","store","createStore","combineReducers","schedule","state","type","payload","value","steps","map","item","id","filter","isCurrent","selector","visible","currentNode","schedules","currentScheduleId","segments","subscribe","data","getState","setItem","stringify","UnitConversionSelector","_sel","onChange","f","ref","v","className","defaultValue","index","key","hideSelectDialog","Step","_edit","code","tmu","note","useState","editing","setEditing","toggleEdit","onClick","dispatch","deleteStep","updateStep","parseFloat","toFixed","ExportSchedule","unit","i","getUnitForConversion","dataUrl","mediatype","base64","getDataUrl","headers","join","ArrayToCsv","effort","parseInt","obj","keys","fields","length","Object","serializeObjectToCSV","download","target","href","encodeURI","Schedule","current","getCurrentSchedulesName","setConversion","s","reduce","sum","next","extractNextLayer","path","split","rest","cummulateData","items","cummulated","cum","temp","c","TreeNode","onSelect","expanded","toggleExpansion","nextLayerData","isSelected","e","stopPropagation","selectTreeNode","Tree","selectData","DataTable","selectedData","selectStep","StepSelectorConfirm","_note","close","select","v4","addStep","style","display","autoFocus","placeholder","WorkstepSelectionDialog","selectedStep","chooseStep","switchSchedule","dataToSave","dataToLoad","parsedDataToLoad","updateSchedule","loadSchedule","ListItemView","_name","deleteItem","deleteSchedule","renameSchedule","onBlur","ScheduleList","SegmentForm","_path","_code","_tmu","preventDefault","SegmentTable","deleteSegment","parseAndLoadCsvSegments","csvString","bulk","row","bulkAddSegment","SegmentImportManager","_file","element","callback","reader","FileReader","onload","result","readAsText","files","readFileInputAsText","SegmentManager","show","App","forceUpdate","setValue","useForceUpdate","showSidebar","setShowSidebar","showSegmentManager","setShowSegmentManager","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"kOAAaA,EACK,eADLA,EAEM,gBAFNA,EAGQ,kBAHRA,EAIQ,kBAJRA,EAKC,WALDA,EAMI,cANJA,EAOI,cAPJA,EAQW,qBARXA,EASW,qBATXA,EAUe,yBAVfA,EAWO,iBAXPA,EAYI,cAZJA,EAaS,mBAbTA,EAcO,iBAGPC,EAAS,CAClBC,aAAc,qBACdC,eAAgB,CACZ,CAAEC,KAAM,MAAOC,WAAY,GAC3B,CAAED,KAAM,MAAOC,WAAY,KAC3B,CAAED,KAAM,MAAOC,WAAY,MAC3B,CAAED,KAAM,IAAKC,WAAY,Q,qBCnB3BC,EAAQJ,aAAaK,QAAQN,EAAOC,cACpCM,EAAYF,EAAQG,KAAKC,MAAMJ,GAAS,GAEjCK,EAAQC,YAAYC,YAAgB,CAC7CC,SC+BoB,WAAuC,IAAtCC,EAAqC,uDAA7B,GAA6B,yCAAvBC,EAAuB,EAAvBA,KAASC,EAAc,wBAC1D,OAAQD,GACJ,KAAKhB,EACD,OAAO,eAAKe,EAAZ,CAAmBV,WAAYY,EAAQC,QAC3C,KAAKlB,EACD,OAAO,aAAEK,WAAY,EAAGc,MAAO,IAAOF,GAC1C,KAAKjB,EACD,OAAO,eACAe,EADP,CACcI,MAAM,GAAD,mBACRJ,EAAMI,OADE,CACKF,MAG5B,KAAKjB,EACD,OAAO,eACAe,EADP,CACcI,MAAOJ,EAAMI,MAAMC,KACzB,SAAAC,GAAI,OAAIA,EAAKC,KAAOL,EAAQK,GACxBD,EADI,eACQA,EADR,GACiBJ,QAGrC,KAAKjB,EACD,OAAO,eACAe,EADP,CACcI,MAAOJ,EAAMI,MAClBI,QAAO,SAAAF,GAAI,OAAIA,EAAKC,KAAOL,EAAQK,QAEhD,KAAKtB,EACD,OAAIiB,EAAQO,UACD,GAEGT,EAClB,QACI,OAAOA,ID7DLU,SCiEU,WAAuC,IAAtCV,EAAqC,uDAA7B,GAA6B,yCAAvBC,EAAuB,EAAvBA,KAASC,EAAc,wBAC1D,OAAQD,GACJ,KAAKhB,EACD,OAAO,eAAKe,EAAZ,CAAmBW,SAAS,IAChC,KAAK1B,EACD,OAAO,eAAKe,EAAZ,CAAmBW,SAAS,IAChC,KAAK1B,EACD,OAAO,eAAKe,EAAZ,CAAmBY,YAAaV,EAAQb,OAC5C,QACI,OAAOW,ID1EKa,UCNC,WAAuC,IAAtCb,EAAqC,uDAA7B,GAA6B,yCAAvBC,EAAuB,EAAvBA,KAASC,EAAc,wBAC3D,OAAQD,GACJ,KAAKhB,EACD,MAAM,GAAN,mBAAWe,GAAX,CAAkBE,IACtB,KAAKjB,EACD,OAAOe,EAAMK,KAAI,SAAAC,GAAI,OAAIA,EAAKC,KAAOL,EAAQK,GACzCD,EADqB,eACTA,EADS,GACAJ,MAC7B,KAAKjB,EACD,OAAOe,EAAMQ,QAAO,SAAAF,GAAI,OAAIA,EAAKC,KAAOL,EAAQK,MACpD,QACI,OAAOP,EAAMQ,QAAO,SAAAF,GAAI,OAAIA,EAAKjB,UDJVyB,kBCQF,WAA8B,IAA7Bd,EAA4B,uDAApB,EAAoB,yCAAfC,EAAe,EAAfA,KAAMM,EAAS,EAATA,GACjD,OAAQN,GACJ,KAAKhB,EACD,OAAOsB,EACX,QACI,OAAOP,IDbmCe,SCiB9B,WAAuC,IAAtCf,EAAqC,uDAA7B,GAA6B,yCAAvBC,EAAuB,EAAvBA,KAASC,EAAc,wBAC1D,OAAQD,GACJ,KAAKhB,EACD,MAAM,CAAEiB,GAAR,mBAAoBF,IACxB,KAAKf,EACD,OAAOe,EAAMQ,QAAO,SAAAF,GAAI,OAAIA,EAAKC,KAAOL,EAAQK,MACpD,KAAKtB,EACD,MAAM,GAAN,mBAAWiB,EAAQa,UAAnB,YAAgCf,IACpC,QACI,OAAOA,MDzBfP,GAEJG,EAAMoB,WAAU,WACZ,IAAMC,EAAOrB,EAAMsB,WACnB/B,aAAagC,QACTjC,EAAOC,aACPO,KAAK0B,UAAUH,OEZhB,IAAMI,EAAyB,SAAC,GAA2C,IAC1EC,EADyE,IAAxChC,kBAAwC,MAA3B,EAA2B,MAAxBiC,gBAAwB,MAAb,SAAAC,GAAC,OAAIA,GAAQ,EAG7E,OACI,4BACIC,IAAK,SAAAC,GAAC,OAAIJ,EAAOI,GACjBH,SAAU,kBAAMA,EAASD,EAAKnB,QAC9BwB,UAAU,gCACVC,aAActC,GACbJ,EAAOE,eAAeiB,KAAI,WAAuBwB,GAAvB,IAAGxC,EAAH,EAAGA,KAAMC,EAAT,EAASA,WAAT,OACvB,4BAAQa,MAAOb,EAAYwC,IAAKD,GAAQxC,Q,QCc3C0C,EAAmB,iBAAO,CACnC9B,KAAMhB,ICxBG+C,EAAO,SAAC,GAA6C,IAC7DC,EADkB1B,EAA0C,EAA1CA,GAAI2B,EAAsC,EAAtCA,KAAMC,EAAgC,EAAhCA,IAAKC,EAA2B,EAA3BA,KAA2B,IAArB9C,kBAAqB,MAAR,EAAQ,IAElC+C,oBAAS,GAFyB,mBAEzDC,EAFyD,KAEhDC,EAFgD,KAI1DC,EAAa,kBAAMD,GAAYD,IAOrC,OACC,yBAAKX,UAAU,4CACd,yBAAKc,QAHQ,kBAAM7C,EAAM8C,SD0BF,SAAAnC,GAAE,MAAK,CAC7BN,KAAMhB,EAAqBsB,MC3BMoC,CAAWpC,KAGvBoB,UAAU,6BAAhC,QAGA,4BAAQA,UAAU,mBAChBO,GAEAI,EAID,0BAAMX,UAAU,mBACf,2BACCF,IAAK,SAAAC,GAAC,OAAIO,EAAQP,GAClBzB,KAAK,OACL2B,aAAcQ,IACf,2BACCK,QAxBU,WACd7C,EAAM8C,SD0BkB,SAACnC,EAAI6B,GAAL,MAAe,CACrCnC,KAAMhB,EAAqBsB,KAAI6B,QC3BlBQ,CAAWrC,EAAI0B,EAAM9B,QACpCoC,GAAW,IAuBPtC,KAAK,SACLE,MAAM,cACP,2BACCsC,QAASD,EACTvC,KAAK,SACLE,MAAM,eAfP,0BAAMsC,QAASD,EAAYb,UAAU,2BACpCS,EADD,QAkBF,0BAAMT,UAAU,oBACbkB,WAAWV,GAAO7C,GAAYwD,QAAQ,MCvC/BC,EAAiB,WAAO,IAAD,EACiBnD,EAAMsB,WAAWnB,SADlC,IAC1BK,aAD0B,MAClB,GADkB,MACdf,YADc,MACP,GADO,MACHC,kBADG,MACU,GADV,EAE5B0D,ECoB4B,WAAgB,IAAf7C,EAAc,uDAAN,EAC3C,OAAOjB,EAAOE,eACXoB,QAAO,SAAAyC,GAAC,OAAIA,EAAE3D,aAAeuD,WAAW1C,MAAQ,GAAGd,KDtBzC6D,CAAqB5D,GAS5B6D,ECOkB,SAAClC,GAA0C,IAApCmC,EAAmC,uDAAvB,GAAIC,EAAmB,wDAClE,MAAM,QAAN,OAAeD,GAAf,OAA2BC,EAAS,UAAY,GAAhD,YAAsDpC,GDRtCqC,CCDQ,mBAACrC,EAAD,uDAAQ,GAAR,mBAAesC,EAAf,iCAAeA,EAAf,yBACxBA,EAAQC,KAAK,KAAO,OAASvC,EAAKuC,KAAK,QDCrCC,CARmBrD,EAClBC,KAAI,gBAAG6B,EAAH,EAAGA,KAAME,EAAT,EAASA,KAAMD,EAAf,EAAeA,IAAf,MAA0B,CAC7BD,OAAME,OACNsB,OAAQC,SAASxB,GAAO7C,EAAY0D,WAErC3C,KAAI,SAAAC,GAAI,OCIuB,WAAuB,IAAC,IAAvBsD,EAAsB,uDAAhB,GAAgB,mBAATC,EAAS,iCAATA,EAAS,kBACzD,IAAMC,EAASD,EAAKE,OAASF,EAAOG,OAAOH,KAAKD,GAChD,OAAOE,EAAOzD,KAAI,SAAAmB,GAAC,OAAIoC,EAAIpC,MAAIgC,KAAK,KDNrBS,CAAqB3D,MAGT,OAAQ,eAAgB,UAAW,WAC5D,0BAGF,OACE,yBAAKqB,UAAU,yCACb,uBACEuC,SAAU7E,EAAO,OACjB8E,OAAO,SACPC,KAAMC,UAAUlB,IAHlB,YEdOmB,EAAW,WAAO,IAAD,EACa1E,EAAMsB,WAAWnB,SAD9B,IAClBT,kBADkB,MACL,EADK,MACFc,aADE,MACM,GADN,EAGpBf,EDR6B,WAAO,IAAD,EACFO,EAAMsB,WAAvCJ,EADmC,EACnCA,kBACFyD,EAFqC,EAChB1D,UAExBL,QAAO,SAAAF,GAAI,OAAIA,EAAKC,KAAOO,KAAmB,GAEjD,OAAIyD,EACKA,EAAQlF,KAEV,GCAQmF,GAEb,OAAKnF,EAQD,yBAAKsC,UAAU,gDACX,wBAAIA,UAAU,mBAAmBtC,GACjC,yBAAKsC,UAAU,+CACX,kBAAC,EAAD,CACIJ,SAfS,SAAApB,GAAK,OAAIP,EAAM8C,SJsCf,SAAAvC,GAAK,MAAK,CACnCF,KAAMhB,EAAwBkB,SIvCmBsE,CAActE,KAgB/Cb,WAAYA,KAEpB,kBAAC,EAAD,MACA,yBAAKqC,UAAU,SACVvB,EAAMC,KAAI,SAACC,EAAMuB,GAAP,OACP,kBAAC,EAAD,iBAAUvB,EAAV,CAAgBhB,WAAYA,EAAYwC,IAAKD,SAGrD,yBAAKF,UAAU,UAEX,yBACIc,QAAS,kBAAM7C,EAAM8C,SJdF,CACnCzC,KAAMhB,KIcU0C,UAAU,mBAFd,2BAKA,yBAAKA,UAAU,OAAf,mBAESvB,EACIC,KAAI,SAAAqE,GAAC,OAAIA,EAAEvC,OACXwC,QAAO,SAACC,EAAKC,GAAN,OAAeD,EAAMjB,SAASkB,KAAO,GAC3CvF,GAAYwD,QAAQ,MA/BtC,yBAAKnB,UAAU,iCACX,uBAAGA,UAAU,qBAAb,iD,QChBHmD,EAAmB,SAAAxE,GAAS,IAAD,EACZA,EAAKyE,KAAKC,MAAM,KADJ,iBAC7B3F,EAD6B,KACpB4F,EADoB,WAEpC,OAAO,eAAK3E,EAAZ,CAAkBjB,OAAM0F,KAAME,EAAKzB,KAAK,QAG/B0B,EAAgB,SAAAC,GACzB,IAAMC,EAAaD,EAAMR,QAAO,SAACU,EAAK/E,GAAU,IAAD,EACLA,EAA9BjB,YADmC,MAC5B,UAD4B,EACd4F,EADc,YACL3E,EADK,UAErCgF,EAAOD,EAAIhG,GAAQgG,EAAIhG,GAAQ,GAErC,OADAgG,EAAIhG,GAAJ,sBAAgBiG,GAAhB,CAAsBL,IACfI,IACR,IAEH,OAAOrB,OAAOH,KAAKuB,GAAY/E,KAAI,SAAAkF,GAAC,MAAK,CACrClG,KAAMkG,EACNtE,KAAMmE,EAAWG,QCVZC,EAAW,SAAXA,EAAY,GAA4C,IAA1CnG,EAAyC,EAAzCA,KAAyC,IAAnC4B,YAAmC,MAA5B,GAA4B,MAAxBwE,gBAAwB,MAAb,SAAAjE,GAAC,OAAIA,GAAQ,IAC5Ba,oBAAS,GADmB,mBACzDqD,EADyD,KAC/CC,EAD+C,KAS1DC,EAAgBV,EAAcjE,EAAKZ,IAAIyE,IATmB,EAUnClF,EAAMsB,WAAWR,SAAtCE,YACFiF,QAX0D,MAU1C,GAV0C,KAW7BxG,EACnC,OACI,yBAAKsC,UAAS,oBAAekE,EAAa,WAAa,IAAMpD,QAVjD,SAAAqD,GACZA,EAAEC,kBACFJ,GAAiBD,GACjB9F,EAAM8C,SNiCgB,SAAArD,GAAI,MAAK,CACnCY,KAAMhB,EAAgCI,QMlCnB2G,CAAe3G,IAC9BoG,EAASxE,KAOL,4BAAK5B,GACL,yBAAKsC,UAAU,YACV+D,EAAWE,EAAcvF,KAAI,SAACC,EAAMuB,GAAP,OAC1B,kBAAC2D,EAAD,eAAU1D,IAAKD,GAAWvB,EAA1B,CAAgCmF,SAAUA,QACzC,QClBRQ,EAAO,SAAC,GAA6B,IAAD,IAA1BC,kBAA0B,MAAb,SAAA1E,GAAC,OAAIA,GAAQ,IACnB5B,EAAMsB,WAAxBH,gBADqC,MAC1B,GAD0B,EAG7C,OAAQ,yBAAKY,UAAU,QAClBuD,EAAcnE,EAASV,IAAIyE,IAAmBzE,KAAI,SAACC,EAAMuB,GAAP,OAC/C,kBAAC,EAAD,eAAU4D,SAAUS,EAAYpE,IAAKD,GAAWvB,SCR/C6F,EAAY,SAAC,GAAgD,IAAD,IAA7CC,oBAA6C,MAA9B,GAA8B,MAA1BC,kBAA0B,MAAb,SAAA7E,GAAC,OAAIA,GAAQ,EACvE,OACE,yBAAKG,UAAU,QACb,2BAAOA,UAAU,YACdyE,EAAarC,OAAS,EACpB,wBAAIpC,UAAU,kBACb,uCACA,oCACA,oCAEA,KACHyE,EAAa/F,KAAI,WAAsBwB,GAAtB,IAAGkD,EAAH,EAAGA,KAAM7C,EAAT,EAASA,KAAMC,EAAf,EAAeA,IAAf,OAChB,wBAAIL,IAAKD,EAAOY,QAAS,kBAAM4D,EAAW,CAAEnE,OAAMC,UAChD,4BAAK4C,GACL,4BAAK7C,GACL,4BAAKC,UCbJmE,EAAsB,SAAC,GAA6B,IAE3DC,EAFgCrE,EAA0B,EAA1BA,KAAMC,EAAoB,EAApBA,IAAKsD,EAAe,EAAfA,SAC/C,IAAKvD,IAASC,EAAK,OAAO,KAG1B,IAAMqE,EAAQ,WACZf,IACA7F,EAAM8C,SAASX,MAEX0E,EAAS,WACb7G,EAAM8C,STkBa,SAACR,EAAMC,EAAKC,GAAZ,MAAsB,CACzCnC,KAAMhB,EAAkBsB,GAAImG,cAC5BxE,OAAMC,MAAKC,QSpBIuE,CAAQzE,EAAMC,EAAKoE,EAAMpG,QACxCsF,KAGF,OACE,yBAAK9D,UAAU,iCACbiF,MAAO,CAAEC,QAAS,UAClB,yBAAKlF,UAAU,oBACb,yBAAKA,UAAU,kBACb,qCACSO,EADT,WACuBC,IAGzB,yBAAKR,UAAU,kBACb,2BACEF,IAAK,SAAAC,GAAC,OAAI6E,EAAQ7E,GAClBoF,WAAS,EACTC,YAAY,6BACZ9G,KAAK,OACL0B,UAAU,cAEd,yBAAKA,UAAU,UACb,4BACEc,QAAS,WAAQgE,IAAUD,KAC3B7E,UAAU,6BAFZ,iBAKA,4BACEc,QAASgE,EACT9E,UAAU,6BAFZ,2CAKA,4BACEc,QAAS+D,EACT7E,UAAU,6BAFZ,iBCtCGqF,EAA0B,WAAO,IAAD,EACR3E,mBAAS,IADD,mBACpC+D,EADoC,KACtBF,EADsB,OAER7D,mBAAS,IAFD,mBAEpC4E,EAFoC,KAEtBC,EAFsB,OAGftH,EAAMsB,WAAWR,SAArCC,QAGR,YAN2C,SASzC,yBAAKgB,UAAU,kBACbiF,MAAO,CAAEC,QAAS,UAClB,yBAAKlF,UAAU,uDACb,wBAAIA,UAAU,wBAAd,uBACA,yBACEc,QAVM,kBAAM7C,EAAM8C,SAASX,MAW3BJ,UAAU,8CAFZ,QAIA,kBAAC,EAAD,CAAMuE,WAAYA,IAClB,kBAAC,EAAD,CAAWE,aAAcA,EAAcC,WAAYa,IACnD,kBAAC,EAAD,iBAAyBD,EAAzB,CAAuCxB,SAAU,kBAAMyB,EAAW,UAbnD,MCVVC,EAAiB,SAAA5G,GAAO,IAAD,EAC2BX,EAAMsB,WADjC,IAC1BnB,gBAD0B,MACf,GADe,MACXc,iBADW,MACC,GADD,EACKC,EADL,EACKA,kBACjCsG,EAAa1H,KAAK0B,UAAUrB,GAC5BsH,EAAaxG,EAAUL,QAAO,SAAAF,GAAI,OAAIA,EAAKC,KAAOA,KAAI,GAE5D,GAAI8G,EAAY,CAAC,IACPpG,EAAeoG,EAAfpG,KAAM5B,EAASgI,EAAThI,KACRiI,EAAmBrG,EAAOvB,KAAKC,MAAMsB,GAAQA,EACnDrB,EAAM8C,SXJoB,SAACnC,EAAIU,GAAL,MAAe,CACzChB,KAAMhB,EAAyBsB,KAAIU,QWGpBsG,CAAezG,EAAmBsG,IACjDxH,EAAM8C,SXGkB,SAACnC,EAAIlB,EAAM4B,GAAX,oBACxBhB,KAAMhB,EAAuBsB,KAAIlB,QAAS4B,GWJ3BuG,CAAajH,EAAIlB,EAAMiI,MCP7BG,EAAe,SAAC,GAAkB,IAGzCC,EAHyBnH,EAAe,EAAfA,GAAIlB,EAAW,EAAXA,KAAW,EACdgD,oBAAUhD,GADI,mBACrCiD,EADqC,KAC5BC,EAD4B,KAEtC9B,EAAYF,IAAOX,EAAMsB,WAAWJ,kBAIpC6G,EAAa,kBAAM/H,EAAM8C,SZQH,SAACnC,EAAIE,GAAL,MAAoB,CAC9CR,KAAMhB,EAAyBsB,KAAIE,aYTGmH,CAAerH,EAAIE,KAE3D,OAAI6B,EAEA,yBAAKX,UAAU,aACb,2BACEmF,WAAS,EACTC,YAAY,iBACZtF,IAAK,SAAAC,GAAC,OAAIgG,EAAQhG,GAClBzB,KAAK,OACLsB,SAZO,kBAAM3B,EAAM8C,SZEC,SAACnC,EAAIlB,GAAL,MAAe,CACzCY,KAAMhB,EAAyBsB,KAAIlB,QYHDwI,CAAetH,EAAImH,EAAMvH,SAarD2H,OAAQ,kBAAMvF,GAAW,IACzBX,aAAcvC,KAKpB,yBAEEoD,QApBS,kBAAM0E,EAAe5G,IAqB9BoB,UAAU,kCACV,0BACEA,UAAU,QAAQtC,GACpB,yBAAKsC,UAAU,oBACb,0BACEc,QAAS,SAAAqD,GAAOA,EAAEC,kBAAmBxD,GAAW,IAChDZ,UAAU,aAFZ,QAGA,0BACEc,QAAS,SAAAqD,GAAOA,EAAEC,kBAAmB4B,KACrChG,UAAU,eAFZ,WCjCKoG,EAAe,SAAC,GAAwB,IAAD,IAArBpG,iBAAqB,MAAT,GAAS,IACvB/B,EAAMsB,WAAzBL,iBAD0C,MAC9B,GAD8B,EAGlD,OACE,yBAAKc,UAAW,iBAAmBA,GACjC,yBACEc,QAJM,kBAAM7C,EAAM8C,SbJU,CAChCzC,KAAMhB,EAAsBI,KaGe,GbHTkB,GAAImG,cAAMzF,KAAM,MaQ9CU,UAAU,0BAFZ,2BAKA,6BACCd,EAAUR,KAAI,SAACN,EAAU8B,GAAX,OACb,kBAAC,EAAD,iBAAkB9B,EAAlB,CAA4B+B,IAAKD,UCb5BmG,EAAc,WACzB,IAAIC,EAAOC,EAAOC,EAMlB,OACE,0BAAMxG,UAAU,uBACd,gDACA,2BACEF,IAAK,SAAAC,GAAC,OAAIuG,EAAQvG,GAClBqF,YAAY,OACZ9G,KAAK,OACL0B,UAAU,uCACZ,2BACEF,IAAK,SAAAC,GAAC,OAAIwG,EAAQxG,GAClBqF,YAAY,OACZ9G,KAAK,OACL0B,UAAU,uCACZ,2BACEF,IAAK,SAAAC,GAAC,OAAIyG,EAAOzG,GACjBqF,YAAY,MACZ9G,KAAK,OACL0B,UAAU,uCACZ,2BACE1B,KAAK,SACLwC,QAzBO,SAAAqD,Gd8CW,IAACf,EAAM7C,EAAMC,Ec7CnC2D,EAAEsC,iBACFxI,EAAM8C,Ud4CiBqC,Ec5CGkD,EAAM9H,Md4CH+B,Ec5CUgG,EAAM/H,Md4CVgC,Ec5CiBgG,EAAKhI,Md4Cb,CAC5CI,GAAImG,cAAMzG,KAAMhB,EAAqB8F,OAAM7C,OAAMC,Sc5CjD8F,EAAM9H,MAAQ+H,EAAM/H,MAAQgI,EAAKhI,MAAQ,IAuBrCA,MAAM,YACNwB,UAAU,mDC7BL0G,EAAe,WAAO,IAAD,EACNzI,EAAMsB,WAAxBH,gBADwB,MACb,GADa,EAEhC,OAAKA,EAASgD,OAGZ,2BAAOpC,UAAU,0CACf,+BACE,4BACE,oCACA,oCACA,qCAGJ,+BACGZ,EAASV,KAAI,WAA0BwB,GAA1B,IAAGtB,EAAH,EAAGA,GAAIwE,EAAP,EAAOA,KAAM7C,EAAb,EAAaA,KAAMC,EAAnB,EAAmBA,IAAnB,OACZ,wBAAIL,IAAKD,GACP,4BAAKkD,GACL,4BAAK7C,GACL,4BAAKC,GACL,4BACE,yBACEM,QAAS,kBAAM7C,EAAM8C,SfoCR,SAAAnC,GAAE,MAAK,CAChCN,KAAMhB,EAAwBsB,MerCY+H,CAAc/H,KAC5CoB,UAAU,SAFZ,eAlBiB,MCKlB4G,EAA0B,SAAAC,GACrC,IACMC,EADOD,EAAUxD,MAAM,MACX3E,KAAI,SAAAqI,GAAQ,IAAD,EACDA,EAAI1D,MAAM,KADT,mBAE3B,MAAQ,CAAED,KAFiB,KAEX7C,KAFW,KAELC,IAFK,SAI7BvC,EAAM8C,ShBuCsB,SAAA+F,GAAI,MAAK,CACnCxI,KAAMhB,EACN8B,SAAU0H,EAAKpI,KAAI,SAAAC,GAAI,sBAAUA,EAAV,CAAgBC,GAAImG,oBgBzC9BiC,CAAeF,KCdnBG,EAAuB,WAClC,IAAIC,EAGJ,OACE,yBAAKlH,UAAU,mBACb,qDACA,2BACEJ,SANiB,kBDFU,SAACuH,EAASC,GAC3C,IAAMC,EAAS,IAAIC,WACnBD,EAAOE,OAAS,WACdH,EAASC,EAAOG,SAElBH,EAAOI,WAAWN,EAAQO,MAAM,ICHHC,CAAoBT,EAAON,IAOlD9G,IAAK,SAAAC,GAAC,OAAImH,EAAQnH,GAClBzB,KAAK,OACL0B,UAAU,eCTL4H,EAAiB,SAAC,GAAsC,IAAD,IAAnCC,YAAmC,aAArBhD,aAAqB,MAAb,SAAAhF,GAAC,OAAIA,GAAQ,EAClE,OAAKgI,EAIH,yBAAK7H,UAAU,WAAWiF,MAAO,CAAEC,QAAS,UAC1C,yBACElF,UAAU,oCACV,wBAAIA,UAAU,kCAAd,uBACA,yBACEc,QAAS,kBAAM+D,GAAM,IACrB7E,UAAU,uCAFZ,QAKA,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,QAfY,M,YCoCL8H,MA5Bf,WACE,IAAMC,EANR,WAA2B,IAAD,EACErH,mBAAS,GADX,mBACVsH,GADU,WAExB,OAAO,kBAAMA,GAAS,SAAAxJ,GAAK,QAAMA,MAIbyJ,GACpBhK,EAAMoB,UAAU0I,GAFH,MAGyBrH,oBAAS,GAHlC,mBAGNwH,EAHM,KAGOC,EAHP,OAIuCzH,oBAAS,GAJhD,mBAIN0H,EAJM,KAIcC,EAJd,KAMb,OACE,yBAAKrI,UAAU,mCACb,yBAAKA,UAAU,0BACb,0CACA,yBACEc,QAAS,kBAAMqH,GAAgBD,IAC/BlI,UAAU,kCAFZ,QAGA,yBACEc,QAAS,kBAAMuH,GAAsB,IACrCrI,UAAU,qCAFZ,SAIF,kBAAC,EAAD,CAAcA,UAAS,uBAAkBkI,EAAc,GAAK,aAC5D,yBAAKlI,UAAU,oBACb,kBAAC,EAAD,OAEF,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAgB6H,KAAMO,EAAoBvD,MAAOwD,MCxBnCC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD8H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.8fc626ea.chunk.js","sourcesContent":["export const ACTIONS = {\n    ADD_SCHEDULE: \"ADD_SCHEDULE\",\n    LOAD_SCHEDULE: \"LOAD_SCHEDULE\",\n    UPDATE_SCHEDULE: \"UPDATE_SCHEDULE\",\n    DELETE_SCHEDULE: \"DELETE_SCHEDULE\",\n    ADD_STEP: \"ADD_STEP\",\n    UPDATE_STEP: \"UPDATE_STEP\",\n    DELETE_STEP: \"DELETE_STEP\",\n    SHOW_SELECT_DIALOG: \"SHOW_SELECT_DIALOG\",\n    HIDE_SELECT_DIALOG: \"HIDE_SELECT_DIALOG\",\n    SET_SELECTED_TREE_NODE: \"SET_SELECTED_TREE_NODE\",\n    SET_CONVERSION: \"SET_CONVERSION\",\n    ADD_SEGMENT: \"ADD_SEGMENT\",\n    BULK_ADD_SEGMENT: \"BULK_ADD_SEGMENT\",\n    DELETE_SEGMENT: \"DELETE_SEGMENT\"\n}\n\nexport const CONFIG = {\n    localStorage: \"tmu-planer-storage\",\n    unitConversion: [\n        { name: \"TMU\", conversion: 1 },\n        { name: \"sec\", conversion: 0.03 },\n        { name: \"min\", conversion: 0.0006 },\n        { name: \"h\", conversion: 0.00001 }\n    ]\n}","import { createStore, combineReducers } from \"redux\";\nimport { CONFIG } from \"./constants\";\nimport { schedule, selector, schedules, currentScheduleId, segments } from \"./reducers\"\n\nconst local = localStorage.getItem(CONFIG.localStorage)\nconst localData = local ? JSON.parse(local) : {}\n\nexport const store = createStore(combineReducers({\n    schedule, selector, schedules, currentScheduleId, segments\n}), localData)\n\nstore.subscribe(() => {\n    const data = store.getState();\n    localStorage.setItem(\n        CONFIG.localStorage,\n        JSON.stringify(data)\n    )\n})","import { ACTIONS } from \"./constants\"\n\nexport const schedules = (state = [], { type, ...payload }) => {\n    switch (type) {\n        case ACTIONS.ADD_SCHEDULE:\n            return [...state, payload]\n        case ACTIONS.UPDATE_SCHEDULE:\n            return state.map(item => item.id !== payload.id ?\n                item : { ...item, ...payload })\n        case ACTIONS.DELETE_SCHEDULE:\n            return state.filter(item => item.id !== payload.id)\n        default:\n            return state.filter(item => item.name)\n    }\n}\n\nexport const currentScheduleId = (state = 0, { type, id }) => {\n    switch (type) {\n        case ACTIONS.LOAD_SCHEDULE:\n            return id\n        default:\n            return state\n    }\n}\n\nexport const segments = (state = [], { type, ...payload }) => {\n    switch (type) {\n        case ACTIONS.ADD_SEGMENT:\n            return [payload, ...state]\n        case ACTIONS.DELETE_SEGMENT:\n            return state.filter(item => item.id !== payload.id)\n        case ACTIONS.BULK_ADD_SEGMENT:\n            return [...payload.segments, ...state]\n        default:\n            return state\n    }\n}\n\n\nexport const schedule = (state = {}, { type, ...payload }) => {\n    switch (type) {\n        case ACTIONS.SET_CONVERSION:\n            return { ...state, conversion: payload.value }\n        case ACTIONS.LOAD_SCHEDULE:\n            return { conversion: 1, steps: [], ...payload }\n        case ACTIONS.ADD_STEP:\n            return {\n                ...state, steps: [\n                    ...state.steps, payload\n                ]\n            }\n        case ACTIONS.UPDATE_STEP:\n            return {\n                ...state, steps: state.steps.map(\n                    item => item.id !== payload.id ?\n                        item : { ...item, ...payload }\n                )\n            }\n        case ACTIONS.DELETE_STEP:\n            return {\n                ...state, steps: state.steps\n                    .filter(item => item.id !== payload.id)\n            }\n        case ACTIONS.DELETE_SCHEDULE:\n            if (payload.isCurrent) {\n                return {}\n            }\n            else { return state }\n        default:\n            return state\n    }\n}\n\nexport const selector = (state = {}, { type, ...payload }) => {\n    switch (type) {\n        case ACTIONS.SHOW_SELECT_DIALOG:\n            return { ...state, visible: true }\n        case ACTIONS.HIDE_SELECT_DIALOG:\n            return { ...state, visible: false }\n        case ACTIONS.SET_SELECTED_TREE_NODE:\n            return { ...state, currentNode: payload.name }\n        default:\n            return state\n    }\n}\n","import React from 'react'\nimport { CONFIG } from '../redux/constants'\n\nexport const UnitConversionSelector = ({ conversion = 1, onChange = f => f }) => {\n    let _sel\n\n    return (\n        <select\n            ref={v => _sel = v}\n            onChange={() => onChange(_sel.value)}\n            className=\"w3-select conversion-selector\"\n            defaultValue={conversion}>\n            {CONFIG.unitConversion.map(({ name, conversion }, index) => (\n                <option value={conversion} key={index}>{name}</option>\n            ))}\n        </select>\n    )\n}\n","import { ACTIONS } from \"./constants\";\nimport { v4 } from \"uuid\";\n\nexport const addSchedule = name => ({\n    type: ACTIONS.ADD_SCHEDULE, name, id: v4(), data: \"\"\n})\n\nexport const updateSchedule = (id, data) => ({\n    type: ACTIONS.UPDATE_SCHEDULE, id, data\n})\n\nexport const renameSchedule = (id, name) => ({\n    type: ACTIONS.UPDATE_SCHEDULE, id, name\n})\n\nexport const loadSchedule = (id, name, data) => ({\n    type: ACTIONS.LOAD_SCHEDULE, id, name, ...data\n})\n\nexport const deleteSchedule = (id, isCurrent) => ({\n    type: ACTIONS.DELETE_SCHEDULE, id, isCurrent\n})\n\nexport const showSelectDialog = () => ({\n    type: ACTIONS.SHOW_SELECT_DIALOG\n})\n\nexport const hideSelectDialog = () => ({\n    type: ACTIONS.HIDE_SELECT_DIALOG\n})\n\nexport const addStep = (code, tmu, note) => ({\n    type: ACTIONS.ADD_STEP, id: v4(),\n    code, tmu, note\n})\n\nexport const updateStep = (id, note) => ({\n    type: ACTIONS.UPDATE_STEP, id, note\n})\n\nexport const deleteStep = id => ({\n    type: ACTIONS.DELETE_STEP, id\n})\n\nexport const selectTreeNode = name => ({\n    type: ACTIONS.SET_SELECTED_TREE_NODE, name\n})\n\nexport const setConversion = value => ({\n    type: ACTIONS.SET_CONVERSION, value\n})\n\nexport const addSegment = (path, code, tmu) => ({\n    id: v4(), type: ACTIONS.ADD_SEGMENT, path, code, tmu\n})\n\nexport const bulkAddSegment = bulk => ({\n    type: ACTIONS.BULK_ADD_SEGMENT,\n    segments: bulk.map(item => ({ ...item, id: v4() }))\n})\n\nexport const deleteSegment = id => ({\n    type: ACTIONS.DELETE_SEGMENT, id\n})","import React, { useState } from 'react'\nimport { store } from '../redux/store'\nimport { updateStep, deleteStep } from '../redux/actions'\n\nexport const Step = ({ id, code, tmu, note, conversion = 1 }) => {\n\tlet _edit\n\tconst [editing, setEditing] = useState(false)\n\n\tconst toggleEdit = () => setEditing(!editing)\n\tconst update = () => {\n\t\tstore.dispatch(updateStep(id, _edit.value))\n\t\tsetEditing(false)\n\t}\n\n\tconst remove = () => store.dispatch(deleteStep(id))\n\treturn (\n\t\t<div className=\"w3-row-padding w3-display-container step\">\n\t\t\t<div onClick={remove} className=\"w3-display-topright close\">\n\t\t\t\t&times;\n\t\t\t</div>\n\t\t\t<strong className=\"w3-col l2 m2 s2\">\n\t\t\t\t{code}\n\t\t\t</strong>\n\t\t\t{!editing ?\n\t\t\t\t(<span onClick={toggleEdit} className=\"w3-col l8 m8 s8 pointer\">\n\t\t\t\t\t{note}&nbsp;\n\t\t\t\t</span>) :\n\t\t\t\t<span className=\"w3-col l8 m8 s8\" >\n\t\t\t\t\t<input\n\t\t\t\t\t\tref={v => _edit = v}\n\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\tdefaultValue={note} />\n\t\t\t\t\t<input\n\t\t\t\t\t\tonClick={update}\n\t\t\t\t\t\ttype=\"button\"\n\t\t\t\t\t\tvalue=\"Speichern\" />\n\t\t\t\t\t<input\n\t\t\t\t\t\tonClick={toggleEdit}\n\t\t\t\t\t\ttype=\"button\"\n\t\t\t\t\t\tvalue=\"Abbrechen\" />\n\t\t\t\t</span>\n\t\t\t}\n\t\t\t<span className=\"w3-col l1 m1 s1\">\n\t\t\t\t{(parseFloat(tmu) * conversion).toFixed(5)}\n\t\t\t</span>\n\t\t</div>\n\t)\n}\n","import React from 'react'\nimport { getUnitForConversion, getDataUrl, serializeObjectToCSV, ArrayToCsv } from './utils'\nimport { store } from '../redux/store'\n\nexport const ExportSchedule = () => {\n  const { steps = [], name = \"\", conversion = \"\" } = store.getState().schedule\n  const unit = getUnitForConversion(conversion)\n\n  const dataToExport = steps\n    .map(({ code, note, tmu }) => ({\n      code, note,\n      effort: parseInt(tmu) * conversion, unit\n    }))\n    .map(item => serializeObjectToCSV(item))\n\n  const dataUrl = getDataUrl(\n    ArrayToCsv(dataToExport, \"Code\", \"Beschreibung\", \"Aufwand\", \"Einheit\"),\n    \"text/csv;charset=utf-8\"\n  )\n\n  return (\n    <div className=\"export pointer button w3-col l2 m2 s2\">\n      <a\n        download={name + \".csv\"}\n        target=\"_blank\"\n        href={encodeURI(dataUrl)}>Export</a>\n    </div>\n  )\n}\n","import { store } from \"../redux/store\"\nimport { CONFIG } from \"../redux/constants\";\n\nexport const getCurrentSchedulesName = () => {\n  const { currentScheduleId, schedules } = store.getState();\n  const current = schedules\n    .filter(item => item.id === currentScheduleId)[0]\n\n  if (current)\n    return current.name\n\n  return \"\"\n}\n\nexport const ArrayToCsv = (data = [], ...headers) =>\n  headers.join(';') + \"\\r\\n\" + data.join(\"\\r\\n\")\n\nexport const serializeObjectToCSV = (obj = {}, ...keys) => {\n  const fields = keys.length ? keys : Object.keys(obj)\n  return fields.map(f => obj[f]).join(';')\n}\n\nexport const getDataUrl = (data, mediatype = \"\", base64 = false) => {\n  return `data:${mediatype}${base64 ? \";base64\" : \"\"},${data}`\n}\n\nexport const getUnitForConversion = (value = 1) => {\n  return CONFIG.unitConversion\n    .filter(i => i.conversion === parseFloat(value))[0].name\n}","import React from 'react'\nimport { UnitConversionSelector } from './UnitConversionSelector'\nimport { store } from '../redux/store'\nimport { showSelectDialog, setConversion } from '../redux/actions'\nimport { Step } from './Step'\nimport { getCurrentSchedulesName } from './utils'\nimport { ExportSchedule } from './ExportSchedule'\n\nexport const Schedule = () => {\n    const { conversion = 1, steps = [] } = store.getState().schedule\n    const updateConversion = value => store.dispatch(setConversion(value))\n    const name = getCurrentSchedulesName()\n\n    if (!name)\n        return (\n            <div className=\"schedule w3-display-container\">\n                <p className=\"w3-display-middle\">\n                    Zurzeit ist kein Arbeitsplan ausgewählt.\n                </p>\n            </div>)\n    return (\n        <div className=\"w3-display-container w3-row-padding schedule\">\n            <h2 className=\"w3-col l8 m8 s8\">{name}</h2>\n            <div className=\"conversion-selector pointer w3-col l2 m2 s2\">\n                <UnitConversionSelector\n                    onChange={updateConversion}\n                    conversion={conversion} />\n            </div>\n            <ExportSchedule />\n            <div className=\"steps\">\n                {steps.map((item, index) => (\n                    <Step {...item} conversion={conversion} key={index} />\n                ))}\n            </div>\n            <div className=\"footer\">\n\n                <div\n                    onClick={() => store.dispatch(showSelectDialog())}\n                    className=\"add-step button\">\n                    Schritt hinzufügen +\n\t                </div>\n                <div className=\"sum\">\n                    Gesamtaufwand: {\n                        (steps\n                            .map(s => s.tmu)\n                            .reduce((sum, next) => sum + parseInt(next), 0)\n                            * conversion).toFixed(5)\n                    }\n                </div>\n            </div>\n        </div>\n    )\n}\n","export const extractNextLayer = item => {\n    const [name, ...rest] = item.path.split('/')\n    return { ...item, name, path: rest.join('/') }\n}\n\nexport const cummulateData = items => {\n    const cummulated = items.reduce((cum, item) => {\n        const { name = \"default\", ...rest } = item\n        const temp = cum[name] ? cum[name] : []\n        cum[name] = [...temp, rest]\n        return cum\n    }, {})\n\n    return Object.keys(cummulated).map(c => ({\n        name: c,\n        data: cummulated[c]\n    }))\n}","import React, { useState } from 'react'\nimport { extractNextLayer, cummulateData } from './utils'\nimport { store } from '../redux/store'\nimport { selectTreeNode } from '../redux/actions'\n\nexport const TreeNode = ({ name, data = [], onSelect = f => f }) => {\n    const [expanded, toggleExpansion] = useState(false)\n\n    const onClick = e => {\n        e.stopPropagation()\n        toggleExpansion(!expanded)\n        store.dispatch(selectTreeNode(name))\n        onSelect(data)\n    }\n    const nextLayerData = cummulateData(data.map(extractNextLayer))\n    const { currentNode = \"\" } = store.getState().selector\n    const isSelected = currentNode === name\n    return (\n        <div className={`tree-node ${isSelected ? \"selected\" : \"\"}`} onClick={onClick}>\n            <h3>{name}</h3>\n            <div className=\"children\">\n                {expanded ? nextLayerData.map((item, index) => (\n                    <TreeNode key={index} {...item} onSelect={onSelect} />\n                )) : null}\n            </div>\n        </div>\n    )\n}\n","import React from 'react'\nimport { cummulateData, extractNextLayer } from './utils'\nimport { TreeNode } from './TreeNode'\nimport { store } from '../redux/store'\n\nexport const Tree = ({ selectData = f => f }) => {\n    const { segments = [] } = store.getState()\n\n    return (<div className=\"tree\">\n        {cummulateData(segments.map(extractNextLayer)).map((item, index) => (\n            <TreeNode onSelect={selectData} key={index} {...item} />\n        ))}\n    </div>\n    )\n}\n","import React from 'react'\n\nexport const DataTable = ({ selectedData = [], selectStep = f => f }) => {\n  return (\n    <div className=\"data\">\n      <table className=\"w3-table\">\n        {selectedData.length > 0 ?\n          (<tr className=\"w3-hover-white\">\n            <th>Details</th>\n            <th>Code</th>\n            <th>TMU</th>\n          </tr>)\n          : null}\n        {selectedData.map(({ path, code, tmu }, index) => (\n          <tr key={index} onClick={() => selectStep({ code, tmu })}>\n            <td>{path}</td>\n            <td>{code}</td>\n            <td>{tmu}</td>\n          </tr>\n        ))}\n      </table>\n    </div>\n  )\n}\n","import React from 'react'\nimport { store } from '../redux/store'\nimport { hideSelectDialog, addStep } from '../redux/actions'\n\nexport const StepSelectorConfirm = ({ code, tmu, onSelect }) => {\n  if (!code || !tmu) return null\n  let _note\n\n  const close = () => {\n    onSelect()\n    store.dispatch(hideSelectDialog())\n  }\n  const select = () => {\n    store.dispatch(addStep(code, tmu, _note.value))\n    onSelect()\n  }\n\n  return (\n    <div className=\"w3-modal step-selector-confirm\"\n      style={{ display: \"block\" }}>\n      <div className=\"w3-modal-content\">\n        <div className=\"w3-row-padding\">\n          <h3>\n            Code: {code} | TMU: {tmu}\n          </h3>\n        </div>\n        <div className=\"w3-row-padding\">\n          <input\n            ref={v => _note = v}\n            autoFocus\n            placeholder=\"Beschreibung hinzufügen\"\n            type=\"text\"\n            className=\"w3-input\" />\n        </div>\n        <div className=\"w3-row\">\n          <button\n            onClick={() => { select(); close() }}\n            className=\"w3-button w3-col l3 m3 m3\">\n            Hinzufügen\n          </button>\n          <button\n            onClick={select}\n            className=\"w3-button w3-col l6 m6 m6\">\n            Hinzufügen und zurück zur Auswahl\n          </button>\n          <button\n            onClick={close}\n            className=\"w3-button w3-col l3 m3 m3\">\n            Abbrechen\n          </button>\n        </div>\n      </div>\n    </div >\n  )\n}\n","import React, { useState } from 'react'\nimport { store } from '../redux/store'\nimport { hideSelectDialog } from '../redux/actions'\nimport { Tree } from './Tree'\nimport { DataTable } from './DataTable'\nimport { StepSelectorConfirm } from './StepSelectorConfirm'\n\nexport const WorkstepSelectionDialog = () => {\n  const [selectedData, selectData] = useState([])\n  const [selectedStep, chooseStep] = useState({})\n  const { visible = false } = store.getState().selector\n  const close = () => store.dispatch(hideSelectDialog())\n\n  if (!visible) return null\n\n  return (\n    <div className=\"w3-modal w3-row\"\n      style={{ display: \"block\" }}>\n      <div className=\"w3-modal-content w3-display-container step-selector\">\n        <h3 className=\"w3-display-topmiddle\">Bausteine wählen</h3>\n        <div\n          onClick={close}\n          className=\"close w3-display-topright w3-padding-small\">\n          &times;</div>\n        <Tree selectData={selectData} />\n        <DataTable selectedData={selectedData} selectStep={chooseStep} />\n        <StepSelectorConfirm {...selectedStep} onSelect={() => chooseStep({})} />\n      </div>\n    </div >)\n}\n","import { store } from \"../redux/store\"\nimport { updateSchedule, loadSchedule } from \"../redux/actions\"\n\nexport const switchSchedule = id => {\n  const { schedule = {}, schedules = [], currentScheduleId } = store.getState()\n  const dataToSave = JSON.stringify(schedule)\n  const dataToLoad = schedules.filter(item => item.id === id)[0]\n\n  if (dataToLoad) {\n    const { data, name } = dataToLoad\n    const parsedDataToLoad = data ? JSON.parse(data) : data\n    store.dispatch(updateSchedule(currentScheduleId, dataToSave))\n    store.dispatch(loadSchedule(id, name, parsedDataToLoad))\n  }\n\n}","import React, { useState } from 'react'\nimport { store } from '../redux/store'\nimport { renameSchedule, deleteSchedule } from '../redux/actions'\nimport { switchSchedule } from './utils'\n\nexport const ListItemView = ({ id, name }) => {\n  const [editing, setEditing] = useState(!name)\n  const isCurrent = id === store.getState().currentScheduleId\n  let _name\n  const update = () => store.dispatch(renameSchedule(id, _name.value))\n  const load = () => switchSchedule(id)\n  const deleteItem = () => store.dispatch(deleteSchedule(id, isCurrent))\n\n  if (editing)\n    return (\n      <div className=\"list-item\">\n        <input\n          autoFocus\n          placeholder=\"Namen eingeben\"\n          ref={v => _name = v}\n          type=\"text\"\n          onChange={update}\n          onBlur={() => setEditing(false)}\n          defaultValue={name} />\n      </div>\n    )\n\n  return (\n    <div\n\n      onClick={load}\n      className=\"list-item w3-display-container\">\n      <span\n        className=\"name\">{name}</span>\n      <div className=\"w3-display-right\">\n        <span\n          onClick={e => { e.stopPropagation(); setEditing(true) }}\n          className=\"edit icon\">&nbsp;</span>\n        <span\n          onClick={e => { e.stopPropagation(); deleteItem() }}\n          className=\"delete icon\">&nbsp;</span>\n      </div>\n    </div>\n  )\n}\n","import React from 'react'\nimport { store } from '../redux/store'\nimport { addSchedule } from '../redux/actions';\nimport { ListItemView } from './ListItemView';\n\nexport const ScheduleList = ({ className = \"\" }) => {\n  const { schedules = [] } = store.getState();\n  const add = () => store.dispatch(addSchedule(\"\"))\n  return (\n    <div className={\"schedule-list \" + className}>\n      <div\n        onClick={add}\n        className=\"add-schedule list-item\">\n        Arbeitsplan erstellen &#43;\n      </div>\n      <hr />\n      {schedules.map((schedule, index) => (\n        <ListItemView {...schedule} key={index} />\n      ))}\n    </div>\n  )\n}\n","import React from 'react'\nimport { store } from '../redux/store'\nimport { addSegment } from '../redux/actions'\n\nexport const SegmentForm = () => {\n  let _path, _code, _tmu\n  const save = e => {\n    e.preventDefault()\n    store.dispatch(addSegment(_path.value, _code.value, _tmu.value))\n    _path.value = _code.value = _tmu.value = \"\"\n  }\n  return (\n    <form className=\"segment-form w3-row\">\n      <h3>Manuelle Eingabe</h3>\n      <input\n        ref={v => _path = v}\n        placeholder=\"Pfad\"\n        type=\"text\"\n        className=\"w3-input w3-mobile w3-col l3 m3 s3\" />\n      <input\n        ref={v => _code = v}\n        placeholder=\"Code\"\n        type=\"text\"\n        className=\"w3-input w3-mobile w3-col l3 m3 s3\" />\n      <input\n        ref={v => _tmu = v}\n        placeholder=\"TMU\"\n        type=\"text\"\n        className=\"w3-input w3-mobile w3-col l3 m3 s3\" />\n      <input\n        type=\"submit\"\n        onClick={save}\n        value=\"Speichern\"\n        className=\"w3-button w3-mobile w3-input w3-col l2 m2 s2\" />\n    </form>\n  )\n}\n","import React from 'react'\nimport { store } from '../redux/store'\nimport { deleteSegment } from '../redux/actions'\n\nexport const SegmentTable = () => {\n  const { segments = [] } = store.getState()\n  if (!segments.length) return null\n\n  return (\n    <table className=\"segment-table w3-table w3-all w3-white\">\n      <thead>\n        <tr>\n          <th>Pfad</th>\n          <th>Code</th>\n          <th>TMU</th>\n        </tr>\n      </thead>\n      <tbody>\n        {segments.map(({ id, path, code, tmu }, index) => (\n          <tr key={index}>\n            <td>{path}</td>\n            <td>{code}</td>\n            <td>{tmu}</td>\n            <td>\n              <div\n                onClick={() => store.dispatch(deleteSegment(id))}\n                className=\"close\">&times;</div>\n            </td>\n          </tr>\n        ))}\n      </tbody>\n    </table>\n  )\n}\n","import { store } from \"../redux/store\"\nimport { bulkAddSegment } from \"../redux/actions\"\n\nexport const readFileInputAsText = (element, callback) => {\n  const reader = new FileReader()\n  reader.onload = () => {\n    callback(reader.result)\n  }\n  reader.readAsText(element.files[0])\n}\n\nexport const parseAndLoadCsvSegments = csvString => {\n  const rows = csvString.split(\"\\n\")\n  const bulk = rows.map(row => {\n    const [path, code, tmu] = row.split(\";\")\n    return ({ path, code, tmu })\n  })\n  store.dispatch(bulkAddSegment(bulk))\n}","import React from 'react'\nimport { readFileInputAsText, parseAndLoadCsvSegments } from './utils'\n\nexport const SegmentImportManager = () => {\n  let _file\n  const importSegments = () => readFileInputAsText(_file, parseAndLoadCsvSegments)\n\n  return (\n    <div className=\"w3-row w3-white\">\n      <h3>Bausteine importieren</h3>\n      <input\n        onChange={importSegments}\n        ref={v => _file = v}\n        type=\"file\"\n        className=\"w3-input\" />\n    </div>\n  )\n}\n","import React from 'react'\nimport { SegmentForm } from './SegmentForm'\nimport { SegmentTable } from './SegmentTable'\nimport { SegmentImportManager } from './SegmentImportManager'\n\nexport const SegmentManager = ({ show = false, close = f => f }) => {\n  if (!show) return null\n\n\n  return (\n    <div className=\"w3-modal\" style={{ display: \"block\" }}>\n      <div\n        className=\"segment-manager w3-modal-content\">\n        <h2 className=\"w3-display-topmiddle w3-mobile\">Bausteine verwalten</h2>\n        <div\n          onClick={() => close(false)}\n          className=\"close w3-display-topright w3-xlarge\">\n          &times;\n        </div>\n        <SegmentForm />\n        <SegmentImportManager />\n        <SegmentTable />\n      </div>\n    </div >\n  )\n}\n","import React, { useState } from 'react';\nimport { store } from './redux/store';\nimport { Schedule } from './schedule/Schedule';\nimport { WorkstepSelectionDialog } from './workstepSelector/WorkstepSelectionDialog';\nimport { ScheduleList } from './scheduleList/ScheduleList';\nimport { SegmentManager } from './segments/SegmentManager';\nimport 'w3-css'\nimport './styles/style.scss'\n\nfunction useForceUpdate() {\n  const [value, setValue] = useState(0);\n  return () => setValue(value => ++value);\n}\n\nfunction App() {\n  const forceUpdate = useForceUpdate()\n  store.subscribe(forceUpdate)\n  const [showSidebar, setShowSidebar] = useState(false)\n  const [showSegmentManager, setShowSegmentManager] = useState(false)\n\n  return (\n    <div className=\"App w3-row w3-display-container\">\n      <div className=\"top-bar w3-display-top\">\n        <h1>TMU-Planer</h1>\n        <div\n          onClick={() => setShowSidebar(!showSidebar)}\n          className=\"burger-menu w3-display-topleft\">&nbsp;</div>\n        <div\n          onClick={() => setShowSegmentManager(true)}\n          className=\"settings-gear w3-display-topright\">&nbsp;</div>\n      </div>\n      <ScheduleList className={`w3-col l3 m3 ${showSidebar ? \"\" : \" hidden\"}`} />\n      <div className=\"w3-col l9 m9 s12\">\n        <Schedule />\n      </div>\n      <WorkstepSelectionDialog />\n      <SegmentManager show={showSegmentManager} close={setShowSegmentManager} />\n    </div>\n  );\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}